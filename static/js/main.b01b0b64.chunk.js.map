{"version":3,"sources":["components/button/index.jsx","components/dynamicForm/index.jsx","components/input/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","react_default","a","createElement","DynamicForm","_ref","_ref$items","items","displayOnlyLast","constantSubmit","onSubmit","_useState","useState","_useState2","Object","slicedToArray","currentItem","setCurrentItem","_useState3","_useState4","formInfo","setFormInfo","onChangeFormInfo","event","objectSpread","defineProperty","target","id","value","formSubmit","preventDefault","console","log","className","map","item","i","key","concat","onChange","components_button","onClick","disabled","length","Input","label","objectWithoutProperties","Fragment","assign","htmlFor","App","setDisplayOnlyLast","setConstantSubmit","input","type","dynamicForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b01b0b64.chunk.js","sourcesContent":["import React from 'react'\nimport './Button.css'\n\nconst Button = props => <button {...props} />\n\nexport default Button\n","import React, { useState } from 'react'\nimport './DynamicForm.css'\nimport Button from '../button'\n\nconst DynamicForm = ({\n  items = [],\n  constantSubmit,\n  displayOnlyLast,\n  onSubmit,\n}) => {\n  const [currentItem, setCurrentItem] = useState(0)\n  const [formInfo, setFormInfo] = useState({})\n  const moveToPrev = () => setCurrentItem(currentItem - 1)\n  const moveToNext = () => setCurrentItem(currentItem + 1)\n  const onChangeFormInfo = event => {\n    if (constantSubmit) {\n      setFormInfo({ ...formInfo, [event.target.id]: event.target.value })\n      return\n    }\n    setFormInfo({ ...formInfo, [event.target.id]: event.target.value })\n  }\n  const formSubmit = event => {\n    event.preventDefault()\n    console.log(event.target, event.target.value, formInfo)\n    onSubmit()\n  }\n\n  return (\n    <form className='form-container' onSubmit={formSubmit}>\n      {items.map((item, i) => (\n        <input\n          key={item.id}\n          id={item.id}\n          className={`form-item${\n            (displayOnlyLast && currentItem === i) || currentItem >= i\n              ? ' active'\n              : ''\n          }`}\n          onChange={onChangeFormInfo}\n        />\n      ))}\n      {displayOnlyLast ? (\n        <div className='form-options'>\n          <Button onClick={moveToPrev} disabled={!currentItem}>\n            Prev\n          </Button>\n          <Button\n            onClick={currentItem === items.length - 1 ? formSubmit : moveToNext}\n          >\n            {currentItem === items.length - 1 ? 'Submit' : 'Next'}\n          </Button>\n        </div>\n      ) : (\n        currentItem === items.length && (\n          <Button onClick={formSubmit}>Submit</Button>\n        )\n      )}\n    </form>\n  )\n}\n\nexport default DynamicForm\n","import React from 'react'\nimport './Input.css'\n\nconst Input = ({ label, id, ...props }) => (\n  <>\n    {label && <label id={id}>{label}</label>}\n    <input htmlFor={id} {...props} />\n  </>\n)\n\nexport default Input\n","import React, { useState } from 'react'\nimport './App.css'\nimport DynamicForm from './components/dynamicForm'\nimport Input from './components/input'\n\nfunction App() {\n  const [displayOnlyLast, setDisplayOnlyLast] = useState(true)\n  const [constantSubmit, setConstantSubmit] = useState(false)\n  const toggleDisplayOnlyLast = () => setDisplayOnlyLast(!displayOnlyLast)\n  const toggleConstantSubmit = () => setConstantSubmit(!constantSubmit)\n\n  return (\n    <div className='app'>\n      <header className='app-header'>Sample form</header>\n      <div className='options'>\n        <Input\n          type='checkbox'\n          id='displayOnlyLast'\n          label='displayOnlyLast property'\n          onChange={toggleDisplayOnlyLast}\n        />\n        <Input\n          type='checkbox'\n          id='constantSubmit'\n          label='constantSubmit property'\n          onChange={toggleConstantSubmit}\n        />\n      </div>\n      <DynamicForm\n        displayOnlyLast={displayOnlyLast}\n        items={[{ id: 'name' }, { id: 'surname' }, { id: 'address' }]}\n        onSubmit={console.log}\n        setConstantSubmit={setConstantSubmit}\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}